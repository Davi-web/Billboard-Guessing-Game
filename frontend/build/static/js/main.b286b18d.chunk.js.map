{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","songs","setSongs","data","artist","game","setGame","useEffect","fetch","then","response","ok","json","catch","err","console","log","max","randInts","Math","floor","random","className","onDragEnd","result","destination","items","Array","from","splice","source","index","reorderedItem","droppableId","provided","droppableProps","ref","innerRef","map","song","draggableId","draggableProps","dragHandleProps","placeholder","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kOAsFeA,MAlFf,WAAgB,IAAD,EACaC,mBAAS,IADtB,mBACNC,EADM,KACCC,EADD,OAEWF,mBAAS,CAAC,CAAEG,KAAM,GAAIC,OAAQ,MAFzC,mBAENC,EAFM,KAEAC,EAFA,KA2Cb,OAPAC,qBAAU,WA/BRC,MAAM,gCACHC,MAAK,SAACC,GACL,GAAIA,EAASC,GACX,OAAOD,EAASE,OAElB,MAAMF,KAEPD,MAAK,SAACN,GACLD,EAASC,MAEVU,OAAM,SAACC,GACNC,QAAQC,IAAIF,MAsBhB,IAlBqBG,EAkBfC,GAlBeD,EAkBU,IAdxB,CAHUE,KAAKC,MAAMD,KAAKE,SAAWJ,GAC3BE,KAAKC,MAAMD,KAAKE,SAAWJ,GAC3BE,KAAKC,MAAMD,KAAKE,SAAWJ,KAgB5CX,EAAQL,EAAMiB,EAAS,IAAKjB,EAAMiB,EAAS,IAAKjB,EAAMiB,EAAS,OAC9D,CAACjB,IACJc,QAAQC,IAAIX,GAGV,qBAAKiB,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,wDACA,cAAC,IAAD,CAAiBC,UApBC,SAACC,GACvB,GAAKA,EAAOC,YAAZ,CAEA,IAAMC,EAAQC,MAAMC,KAAKvB,GAHS,EAIVqB,EAAMG,OAAOL,EAAOM,OAAOC,MAAO,GAAnDC,EAJ2B,oBAKlCN,EAAMG,OAAOL,EAAOC,YAAYM,MAAO,EAAGC,GAE1C1B,EAAQoB,KAaJ,SACE,cAAC,IAAD,CAAWO,YAAY,aAAvB,SACG,SAACC,GAAD,OACC,6CACEZ,UAAU,cACNY,EAASC,gBAFf,IAGEC,IAAKF,EAASG,SAHhB,UAKGhC,EAAKiC,KAAI,WAAmBP,GAAW,IAA3BQ,EAA0B,EAA1BA,KAAMnC,EAAoB,EAApBA,OACjB,OACE,cAAC,IAAD,CAAsBoC,YAAaD,EAAMR,MAAOA,EAAhD,SACG,SAACG,GAAD,OACC,wDACEE,IAAKF,EAASG,UACVH,EAASO,gBACTP,EAASQ,iBAHf,aAKE,8BACGH,EADH,OACanC,UARHmC,MAenBL,EAASS,2BChEXC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBrC,MAAK,YAAkD,IAA/CsC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.b286b18d.chunk.js","sourcesContent":["import \"./App.css\";\nimport React, { useState, useEffect } from \"react\";\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\n\nfunction App() {\n  const [songs, setSongs] = useState([]);\n  const [game, setGame] = useState([{ data: [], artist: [] }]);\n\n  const callAPI = () => {\n    fetch(\"http://localhost:9000/scrape\")\n      .then((response) => {\n        if (response.ok) {\n          return response.json();\n        }\n        throw response;\n      })\n      .then((data) => {\n        setSongs(data);\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n\n  const getRandomInts = (max) => {\n    const randInt1 = Math.floor(Math.random() * max);\n    const randInt2 = Math.floor(Math.random() * max);\n    const randInt3 = Math.floor(Math.random() * max);\n    return [randInt1, randInt2, randInt3];\n  };\n\n  const handleOnDragEnd = (result) => {\n    if (!result.destination) return;\n\n    const items = Array.from(game);\n    const [reorderedItem] = items.splice(result.source.index, 1);\n    items.splice(result.destination.index, 0, reorderedItem);\n\n    setGame(items);\n  };\n  useEffect(() => {\n    callAPI();\n    const randInts = getRandomInts(100);\n    setGame(songs[randInts[0]], songs[randInts[1]], songs[randInts[2]]);\n  }, [songs]);\n  console.log(game);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Final Space Characters</h1>\n        <DragDropContext onDragEnd={handleOnDragEnd}>\n          <Droppable droppableId=\"characters\">\n            {(provided) => (\n              <ol\n                className=\"characters\"\n                {...provided.droppableProps}\n                ref={provided.innerRef}\n              >\n                {game.map(({ song, artist }, index) => {\n                  return (\n                    <Draggable key={song} draggableId={song} index={index}>\n                      {(provided) => (\n                        <li\n                          ref={provided.innerRef}\n                          {...provided.draggableProps}\n                          {...provided.dragHandleProps}\n                        >\n                          <p>\n                            {song} by {artist}\n                          </p>\n                        </li>\n                      )}\n                    </Draggable>\n                  );\n                })}\n                {provided.placeholder}\n              </ol>\n            )}\n          </Droppable>\n        </DragDropContext>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}